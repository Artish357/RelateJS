#lang racket
(require "faster-miniKanren/mk.rkt" "evalo.rkt" "parseo.rkt" "js-structures.rkt" "helpers.rkt")

(define (PBE make-js examples)
  (foldl (lambda (example prev-goal)
           (define args            (car  example))
           (define expected-result (cadr example))
           (fresh (code store)
                  prev-goal
                  (parseo/readable (apply make-js args) code)
                  (evalo code expected-result store)))
         (== #t #t) examples))

(module+ test
  (require rackunit)
  (define-syntax-rule (test= name expr output)
    (test-equal? name
                 (begin (printf "Running: ~s\n" name)
                        (time expr))
                 output))

  ;   (test= "Puzzle (~150 milliseconds)"
;          (run 5
;            (BLANK)
;            (fresh (code store)
;              (parseo/readable
;                `(call (function (x)
;                                 (return (call (function ()
;                                                         (if #f    ; condition
;                                                           ,BLANK  ; then-branch statement
;                                                           #f)     ; else-branch statement
;                                                         (return x)))))
;                       42)
;                code)
;              (evalo code (jundef) store)))
;          '(((var (x _.0)) (sym _.0))
;            (var (x #t))
;            (var (x #f))
;            (var x)
;            (var (x (op _.0)))))
; 
;   (test= "Fibonacci recursive (~125 milliseconds)"
;          (run 1 (BLANK) (PBE (lambda (n)
;                                `(call (function ()
;                                                 (var (fib (function (x)
;                                                                     (if (op < x 2)
;                                                                       (return x)
;                                                                       (return (op +
;                                                                                   (call fib (op - x 1))
;                                                                                   (call fib (op - x 2))))))))
;                                                 (return (call fib ,n)))))
;                              `(((2) ,(jnum 1))
;                                ((5) ,(jnum 5)))))
;          '(_.0))
;   (test= "Fibonacci recursive, condition (~32 seconds)"
;          (run 1 (BLANK) (PBE (lambda (n)
;                                `(call (function ()
;                                                 (var (fib (function (x)
;                                                                     (if ,BLANK
;                                                                       (return x)
;                                                                       (return (op +
;                                                                                   (call fib (op - x 1))
;                                                                                   (call fib (op - x 2))))))))
;                                                 (return (call fib ,n)))))
;                              `(((2) ,(jnum 1))
;                                ((5) ,(jnum 5)))))
;          '(_.0))
;   (test= "Fibonacci recursive, base case (~270 milliseconds)"
;          (run 1 (BLANK) (PBE (lambda (n)
;                                `(call (function ()
;                                                 (var (fib (function (x)
;                                                                     (if (op < x 2)
;                                                                       ,BLANK
;                                                                       (return (op +
;                                                                                   (call fib (op - x 1))
;                                                                                   (call fib (op - x 2))))))))
;                                                 (return (call fib ,n)))))
;                              `(((2) ,(jnum 1))
;                                ((5) ,(jnum 5)))))
;          '((return x)))
;   (test= "Fibonacci recursive, first subtraction operation description (~68 seconds)"
;          (run 1 (BLANK) (PBE (lambda (n)
;                                `(call (function ()
;                                                 (var (fib (function (x)
;                                                                     (if (op < x 2)
;                                                                       (return x)
;                                                                       (return (op +
;                                                                                   (call fib (op . ,BLANK))
;                                                                                   (call fib (op - x 2))))))))
;                                                 (return (call fib ,n)))))
;                              `(((2) ,(jnum 1))
;                                ((5) ,(jnum 5)))))
;          '((- x (number (1)))))
;   (test= "Fibonacci recursive, second subtraction operation description (~10 seconds)"
;          (run 1 (BLANK) (PBE (lambda (n)
;                                `(call (function ()
;                                                 (var (fib (function (x)
;                                                                     (if (op < x 2)
;                                                                       (return x)
;                                                                       (return (op +
;                                                                                   (call fib (op - x 1))
;                                                                                   (call fib (op . ,BLANK))))))))
;                                                 (return (call fib ,n)))))
;                              `(((2) ,(jnum 1))
;                                ((5) ,(jnum 5)))))
;          '((- x (number (0 1)))))
; 
;   (test= "Range sum (~35 milliseconds)"
;          (run 1 (_)
;            (PBE (lambda (n)
;                   `(call (function (n)
;                                    (var (total 0))
;                                    (for ((var (i 0)) (op < i n) (:= i (op + i 1)))
;                                      (:= total (op + total i)))
;                                    (return total))
;                          ,n))
;                 `(((3) ,(jnum 3))
;                   ((4) ,(jnum 6)))))
;          '(_.0))
;   (test= "Range sum, total declaration and initialization (~390 milliseconds)"
;          (run 1 (BLANK)
;            (PBE (lambda (n)
;                   `(call (function (n)
;                                    ,BLANK
;                                    (for ((var (i 0)) (op < i n) (:= i (op + i 1)))
;                                      (:= total (op + total i)))
;                                    (return total))
;                          ,n))
;                 `(((3) ,(jnum 3))
;                   ((4) ,(jnum 6)))))
;          '((var (total (number ())))))
;   (test= "Range sum, i declaration and initialization (~160 milliseconds)"
;          (run 1 (BLANK)
;            (PBE (lambda (n)
;                   `(call (function (n)
;                                    (var (total 0))
;                                    (for (,BLANK (op < i n) (:= i (op + i 1)))
;                                      (:= total (op + total i)))
;                                    (return total))
;                          ,n))
;                 `(((3) ,(jnum 3))
;                   ((4) ,(jnum 6)))))
;          '((var (i total))))
;   (test= "Range sum, end condition (~540 milliseconds)"
;          (run 1 (BLANK)
;            (PBE (lambda (n)
;                   `(call (function (n)
;                                    (var (total 0))
;                                    (for ((var (i 0)) ,BLANK (:= i (op + i 1)))
;                                      (:= total (op + total i)))
;                                    (return total))
;                          ,n))
;                 `(((3) ,(jnum 3))
;                   ((4) ,(jnum 6)))))
;          '((op < i n)))
;   #;(test= "Range sum, increment (?)"
;          (run 1 (BLANK)
;            (PBE (lambda (n)
;                   `(call (function (n)
;                                    (var (total 0))
;                                    (for ((var (i 0)) (op < i n) ,BLANK)
;                                      (:= total (op + total i)))
;                                    (return total))
;                          ,n))
;                 `(((3) ,(jnum 3))
;                   ((4) ,(jnum 6)))))
;          '((:= i (op + i 1))))
;   (test= "Range sum, assignment right-hand-side (~600 milliseconds)"
;          (run 1 (BLANK)
;            (PBE (lambda (n)
;                   `(call (function (n)
;                                    (var (total 0))
;                                    (for ((var (i 0)) (op < i n) (:= i (op + i 1)))
;                                      (:= total . ,BLANK))
;                                    (return total))
;                          ,n))
;                 `(((3) ,(jnum 3))
;                   ((4) ,(jnum 6)))))
;          '(((op + i total))))
; (test= "Recursive->iterative (no restriction)"
;          (run 1 (BLANK)
;            (PBE (lambda (n)
;                   `(call (function (n)
;                                    (var (rec (function (x) (return (op * rec (call rec (op - x 1)))))))
;                                    (if (op ===
;                                             (call (function (x) ,BLANK ,n)
;                                             (call rec ,n))
;                                         (return 1)
;                                         (return undefined)))
;                          ,n))
;                 `(((3) ,(jnum 1))
;                   ((4) ,(jnum 1)))))
;          '(((op + i total))))
  ;  (test= "Recursive->iterative (while)"
  ;         (run 1 (COND BODY DECL loop-val)
  ;           (PBE (lambda (n)
  ;                  `(call (function (n)
  ;                                   (var (rec (function (x)
  ;                                                       (if (op === x 1)
  ;                                                           (return 1)
  ;                                                           (return (op * rec (call rec (op - x 1))))))))
  ;                                   (if (op ===
  ;                                            (call (function (x)
  ;                                                            (var (loop-var ,loop-val) (counter 0) . ,DECL)
  ;                                                            (while ,COND ,BODY (if (op < (op * ,n ,n) counter)
  ;                                                                                   (return 0)
  ;                                                                                   (:= counter (op + counter 1))))
  ;                                                            (return loop-var)) ,n)
  ;                                            (call rec ,n))
  ;                                        (return 1)
  ;                                        (return undefined)))
  ;                         ,n))
  ;                `(((1) ,(jnum 1))
  ;                  ((2) ,(jnum 1)))))
  ;         '(((op + i total))))
  (test= "No holes"
         (run 1 (EXTRA BODY STORE)
              (PBE (lambda (n) `(call (function (n)
                                                (var (rec (function (y) (if (op < y 2) (return 1) (return (op * y (call rec (op - y 1))))))))
                                                (if
                                                 (op ===
                                                     (call (function (x)
                                                                     (var (counter 0) (total 1))
                                                                     (for ((var (loop-var 1)) (op < loop-var (op + x 1)) (:= loop-var (op + loop-var 1)))
                                                                       (:= total (op * total loop-var))
                                                                       (if (op < (op * n n) counter)
                                                                           (return 0)
                                                                           (:= counter (op + counter 1)))
                                                                       )
                                                                     (return total)
                                                                     ) n)
                                                     (call rec n))
                                                 (return #t)
                                                 (return undefined))
                                                )
                                      ,n))
                            `(((3) ,(jbool #t))
                              ((4) ,(jbool #t))))
              )
         '((_.0 _.1 _.2)))
  (test= "Imperative->recursive"
         (run 1 (REC)
              (PBE (lambda (n) `(call (function (n)
                                                (var (rec (function (y) ,REC)))
                                                (if
                                                 (op ===
                                                     (call (function (x)
                                                                     (var (counter 0) (total 1))
                                                                     (for ((var (loop-var 1)) (op < loop-var (op + x 1)) (:= loop-var (op + loop-var 1)))
                                                                       (:= total (op * total loop-var))
                                                                       (if (op < (op * n n) counter)
                                                                           (return 0)
                                                                           (:= counter (op + counter 1)))
                                                                       )
                                                                     (return total)
                                                                     ) n)
                                                     (call rec n))
                                                 (return #t)
                                                 (return undefined))
                                                )
                                      ,n))
                            `(((1) ,(jbool #t))
                              ((3) ,(jbool #t))
                              ((4) ,(jbool #t))))
              )
         '((_.0 _.1 _.2)))
  (test= "Recursive->iterative (while)"
         (run 1 (COND BODY DECL PROG RET)
              (PBE (lambda (n) `(call (function (n)
                                                (var (rec (function (y) (if (op < y 2) (return 1) (return (op * y (call rec (op - y 1)))))))
                                                     (iter (function (x)
                                                                     (var (counter 0) . ,DECL)
                                                                     (while ,COND
                                                                       ,BODY
                                                                       (if (op < (op * n n) counter)
                                                                           (return #f)
                                                                           (:= counter (op + counter 1))))
                                                                     (return ,RET)
                                                                     )))
                                                (return (op === (call iter n) (call rec n))))
                                      ,n))
                            `(((1) ,(jbool #t))
                              ((3) ,(jbool #t))
                              ((4) ,(jbool #t))))
              )
         '((_.0 _.1 _.2)))
  (test= "Recursive->iterative"
         (run 1 (COND BODY DECL PROG)
              (PBE (lambda (n) `(call (function (n)
                                                (var (rec (function (y) (if (op < y 2) (return 1) (return (op * y (call rec (op - y 1))))))))
                                                (if
                                                 (op ===
                                                     (call (function (x)
                                                                     (var (counter 0))
                                                                     (for ((var . ,DECL) (op < loop-var (op + x 1)) (:= loop-var (op + loop-var 1)))
                                                                       ,BODY
                                                                       (if (op < (op * n n) counter)
                                                                           (return 0)
                                                                           (:= counter (op + counter 1)))
                                                                       )
                                                                     (return total)
                                                                     ) n)
                                                     (call rec n))
                                                 (return #t)
                                                 (return undefined))
                                                )
                                      ,n))
                            `(((3) ,(jbool #t))
                              ((4) ,(jbool #t))))
              )
         '((_.0 _.1 _.2)))
  )
