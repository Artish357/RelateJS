#lang racket
(require "faster-miniKanren/mk.rkt" "evalo.rkt" "parseo.rkt" "js-structures.rkt" "helpers.rkt")
(module+ test
  (require rackunit)
  (define-syntax-rule (test= name expr output)
    (test-equal? name
                 (begin (printf "Running: ~s\n" name)
                        (time expr))
                 output))
  (test= "Puzzle"
         (run 5
           (BLANK)
           (fresh (code store)
             (parseo/readable
               `(call (function (x)
                                (return (call (function ()
                                                        (if #f        ; condition
                                                          ,BLANK    ; then-branch statement
                                                          #f)       ; else-branch statement
                                                        (return x)))))
                      42)
               code)
             (evalo code (jundef) store)))
         '((var (x #t))
           (var (x #f))
           (var (x (number _.0)))
           (var x)
           ((var (x _.0)) (sym _.0))))
  (test= "Fibonacci"
         (run 1 (res)
           (fresh (code store)
             (parseo/readable
               '(call (function ()
                                (var (sum_of_range (function (n)
                                                             (var (total 0))
                                                             (for ((var (i 1)) (op < i (op + n 1)) (:= i (op + i 1)))
                                                               (:= total (op + total i)))
                                                             (return total))))
                                (if (op === (call sum_of_range 1) 1)
                                  (if (op === (call sum_of_range 3) 6)
                                    (return #t)
                                    #f)
                                  #f)))
               code)
             (evalo code (jbool #t) store)))
         '(_.0))
  (test= "Fibonacci, total init missing"
         (run 1 (res)
           (fresh (code store)
             (parseo/readable
               `(call (function ()
                                (var (sum_of_range (function (n)
                                                             ,res
                                                             (for ((var (i 1)) (op < i (op + n 1)) (:= i (op + i 1)))
                                                               (:= total (op + total i)))
                                                             (return total))))
                                (if (op === (call sum_of_range 1) 1)
                                  (if (op === (call sum_of_range 3) 6)
                                    (return #t)
                                    #f)
                                  #f)))
               code)
             (evalo code (jbool #t) store)))
         #f)
  (test= "Fibonacci, body assignment missing"
         (run 1 (res)
           (fresh (code store)
             (parseo/readable
               `(call (function ()
                                (var (sum_of_range (function (n)
                                                             (var (total 0))
                                                             (for ((var (i 1)) (op < i (op + n 1)) (:= i (op + i 1)))
                                                               (:= total ,res))
                                                             (return total))))
                                (if (op === (call sum_of_range 1) 1)
                                  (if (op === (call sum_of_range 3) 6)
                                    (return #t)
                                    #f)
                                  #f)))
               code)
             (evalo code (jbool #t) store)))
         #f)
  (test= "Fibonacci, body missing"
         (run 1 (res)
           (fresh (code store)
             (parseo/readable
               `(call (function ()
                                (var (sum_of_range (function (n)
                                                             (var (total 0))
                                                             (for ((var (i 1)) (op < i (op + n 1)) (:= i (op + i 1)))
                                                               ,res)
                                                             (return total))))
                                (if (op === (call sum_of_range 1) 1)
                                  (if (op === (call sum_of_range 3) 6)
                                    (return #t)
                                    #f)
                                  #f)))
               code)
             (evalo code (jbool #t) store)))
         #f)
  (test= "Fibonacci, end condition missing"
         (run 1 (res)
           (fresh (code store)
             (parseo/readable
               `(call (function ()
                                (var (sum_of_range (function (n)
                                                             (var (total 0))
                                                             (for ((var (i 1)) ,res (:= i (op + i 1)))
                                                               (:= total (op + total i)))
                                                             (return total))))
                                (if (op === (call sum_of_range 1) 1)
                                  (if (op === (call sum_of_range 3) 6)
                                    (return #t)
                                    #f)
                                  #f)))
               code)
             (evalo code (jbool #t) store)))
         #f)
  )
