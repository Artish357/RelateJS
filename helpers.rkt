#lang racket
(require "faster-miniKanren/mk.rkt" "js-structures.rkt" "faster-miniKanren/numbers.rkt")
(provide (all-defined-out))

(define (incremento in out)
  (== out `(,in)))

(define (decremento in out)
  (incremento out in))

(define (keyso o k)
  (conde ((== o '()) (== k '()))
         ((fresh (x v o2 k2)
            (== o `((,x . ,v) . ,o2))
            (== k `(,x . ,k2))
            (keyso o2 k2)))))

(define (absent-keyso val obj)
  (fresh (keys)
    (keyso obj keys)
    (not-in-listo val keys)))

(define (updateo obj key value result)
  (conde ((== obj '())
          (== result `((,key . ,value))))
         ((fresh (orest rrest k v v2)
            (== obj    `((,k . ,v ) . ,orest))
            (== result `((,k . ,v2) . ,rrest))
            (conde ((== k key)
                    (== v2 value)
                    (== orest rrest))
                   ((=/= k key)
                    (== v2 v)
                    (updateo orest key value rrest)))))))

(define (update-objecto obj keys values result)
  (fresh (k krest v vrest obj^)
    (conde
      ((== keys '()) (== values '()) (== result obj))
      ((== keys `(,k . ,krest))
       (== values `(,v . ,vrest))
       (updateo obj k v obj^)
       (update-objecto obj^ krest vrest result)))))

(define (deleteo obj key result)
  (conde ((== obj '()) (== result '()))
         ((fresh (orest rrest k v)
            (== obj `((,k . ,v) . ,orest))
            (conde ((== k key)
                    (== orest result))
                   ((== result `((,k . ,v) . ,rrest))
                    (=/= k key)
                    (deleteo orest key rrest)))))))

(define (appendo s t r)
  (conde ((== s '()) (== t r))
         ((fresh (r^ sel srest)
            (== r `(,sel . ,r^))
            (== s `(,sel . ,srest))
            (appendo srest t r^)))))

(define (zipo as ds pairs)
  (conde ((== as '()) (== ds '()) (== pairs '()))
         ((fresh (a as-rest d ds-rest pairs-rest)
            (== as `(,a . ,as-rest))
            (== ds `(,d . ,ds-rest))
            (== pairs `((,a . ,d) . ,pairs-rest))
            (zipo as-rest ds-rest pairs-rest)))))

(define (not-in-listo el list)
  (conde
    ((== list '()))
    ((fresh (x rest)
       (== `(,x . ,rest) list)
       (=/= el x)
       (not-in-listo el rest)))))

(define (lookupo x env t)
  (fresh (rest y v)
    (== `((,y . ,v) . ,rest) env)
    (conde
      ((== y x) (== v t))
      ((=/= y x) (lookupo x rest t)))))

(define (indexo lst index result)
  (fresh (l lrest index^)
    (== lst `(,l . ,lrest))
    (conde ((== index '())
            (== result l))
           ((=/= index '())
            (decremento index index^)
            (indexo lrest index^ result)))))

(define (set-indexo lst index value result)
  (fresh (l lrest rrest index^)
    (== lst `(,l . ,lrest))
    (conde ((== index '())
            (== result `(,value . ,lrest)))
           ((== result `(,l . ,rrest))
            (=/= index '())
            (decremento index index^)
            (set-indexo lrest index^ value rrest)))))

(define (membero item lst)
  (fresh (first rest)
    (== lst `(,first . ,rest))
    (conde ((== first item))
           ((=/= first item) (membero item rest)))))

(define (no-alist-refo key lst)
  (conde ((== '() lst))
         ((fresh (first-key first-value rest)
            (== lst `((,first-key . ,first-value) . ,rest))
            (=/= key first-key)
            (no-alist-refo key rest)))))

(define (alist-refo key lst value)
  (fresh (first-key first-value rest)
    (== lst `((,first-key . ,first-value) . ,rest))
    (conde ((== first-key key)
            (== value first-value)
            (no-alist-refo key rest))
           ((=/= first-key key)
            (alist-refo key rest value)))))
